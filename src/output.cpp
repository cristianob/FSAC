#include "FSACompiler/output.h"

Output::Output(Semantic *sa, std::string file_name) {
	this->semantic_analyzer = sa;
	this->file_name = file_name;
	this->normalize_file_name();
};

Output::~Output() {};

bool Output::generate_files() {
	this->output_header();
	return true;
};

bool Output::output_header() {
	size_t n;
	std::ofstream header_file;
	header_file.open(file_name + ".hpp", std::ofstream::out);
	
	// Autogenerated commentary
	header_file << 
	"/**\n" <<
 	" * This code is autogenerated by FSAC.\n" <<
	" * Any modifications may be discarted by a future compilation of the FSA file, please\n" <<
	" * modify the FSA source file and recompile it.\n" <<
	" */\n";
	
	// Infinite include checker
	header_file << 
	"#ifndef " << strtoupper(this->file_name_normalized) << "_H_\n" <<
	"#define " << strtoupper(this->file_name_normalized) << "_H_\n\n";
	
	// Static includes
	for(auto i : this->semantic_analyzer->prop_include) {
		header_file << "#include " << i << std::endl;
	}
	
	header_file << std::endl;
	
	// State defines
	n = 0;
	for(auto i : this->semantic_analyzer->prop_state) {
		header_file << "#define " << i.name << " " << n << std::endl;
		n++;
	}
	
	header_file << std::endl;
	
	// Input defines
	n = 0;
	for(auto i : this->semantic_analyzer->prop_input) {
		header_file << "#define " << i << " " << n << std::endl;
		n++;
	}
	
	header_file << std::endl;
	
	// Class opening
	header_file << "class " << this->semantic_analyzer->prop_name << " {" << std::endl
		    << "\tpublic:" << std::endl
		    << "\t" << this->semantic_analyzer->prop_name << "();" << std::endl
		    << "\t~" << this->semantic_analyzer->prop_name << "();" << std::endl;

	// Main methods		    
	header_file << "\tvoid setStateFunction(uint8_t state_i, bool (*fn)(" << this->semantic_analyzer->prop_output_parameter << "));" << std::endl
		    << "\tvoid setInput(uint8_t input_name, bool (*fn)(" << this->semantic_analyzer->prop_input_parameter << "));" << std::endl
		    << "\tbool callInput(uint8_t input_name);" << std::endl
		    << "\tuint8_t calculateState();" << std::endl
		    << "\tvoid runStateFunction();" << std::endl;
	
	header_file << std::endl;
	
	// Members    
	header_file << "\tprivate:" << std::endl
		    << "\tuint8_t state;" << std::endl
		    << "\tbool (*inputs)(" << this->semantic_analyzer->prop_input_parameter << ")[" << this->semantic_analyzer->prop_input.size() << "];" << std::endl
		    << "\tbool (*state_function)(" << this->semantic_analyzer->prop_output_parameter << ")[" << this->semantic_analyzer->prop_state.size() << "];" << std::endl;
		    
	// Class close
	header_file << "}\n\n"
	<< "#endif";
	
	header_file.close();
	
	return 0;
}

void Output::normalize_file_name() {
	std::vector<std::string> split_vector;
	split_and_trim(this->file_name, '/', split_vector);
	split_and_trim(split_vector[split_vector.size() - 1], '.', split_vector);
	this->file_name_normalized = split_vector[split_vector.size() - 2];
}
